;; defines a custom function my-map that takes a function to apply to each element and a list
 (define (my-map f lst)
	;; defines a conditional statement that checks if the list is empty
	;; if the list is empty, it:
	;; - returns an empty list
	;; otherwise, it:
	;; - applies the function to the first item in the list
	;; - then joins that to the result of calling my-map with every
	;; - other item in the list
	(
		cond
		[
	   		(empty? lst)
			empty
		]
   		[
	   		else
			(
				cons 
				(
					f (first lst)
				)
				(
					my-map f (rest lst)
				)
			)
		]
	)
)


;; defines a custom function my-length that takes a list to get the length of
(
	define (my-length lst)
	(
		;; defines a conditional statement that checks if the list is empty
		;; if the list is empty, it:
		;; - returns 0
		;; otherwise, it:
		;; - returns 1 + the length of all but the first element of the list
		cond
		[
			(empty? lst)
			0
		]
		[
			else
			(
				(
					+
					1
					(
						my-length 
						(
							rest
							lst
						)
					)
				)
			)
		]
	)
)

(
	print (
		my-map (lambda (x) (+ x 1)) (list 1 2 3 4)
	)
)

(
	print (
		my-length (list 1 2 3 4 5 6 7 8 9 10)
	)
)


;; Currently supported keywords, opperands, and identifiers: (X marks supported)

;; map: X
;; lambda: X
;; cond: X
;; define: X
;; first: X
;; rest: X
;; and: X
;; or: X
;; unless: X
;; if: X
;; >: X
;; <: X
;; +: X
;; cons: X
;; cons?: X
;; empty: X
;; empty?: X
